<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DNARoma&#39;s DevOps Blog</title>
    <link>https://blog.dna.moe/</link>
    
    <atom:link href="https://blog.dna.moe/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Sun, 17 Jul 2022 20:03:32 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Result of Sekai Viewer&#39;s first anniversary survey</title>
      <link>https://blog.dna.moe/2021/10/16/sekai-viewer-first-anniversary-survey-results/</link>
      <guid>https://blog.dna.moe/2021/10/16/sekai-viewer-first-anniversary-survey-results/</guid>
      <pubDate>Sat, 16 Oct 2021 19:20:32 GMT</pubDate>
      
      <description>&lt;p&gt;Before the first anniversary of Sekai Viewer, a survey is done and the replies are collected until 2021&amp;#x2F;10&amp;#x2F;07 11:58 PM (JST), 101 out of 104 collected replies are valid. Now I would like to share how the replies look like.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<html><head></head><body><p>Before the first anniversary of Sekai Viewer, a survey is done and the replies are collected until 2021/10/07 11:58 PM (JST), 101 out of 104 collected replies are valid. Now I would like to share how the replies look like.</p><span id="more"></span><p>Most users seem have played Project Sekai for a long time: 87.1% of all users have played for more than 6 months.</p><p><img src="/images/2021-10-16-20-08-36.png" alt="How long have you played Project Sekai?"></p><p>And about 70% of them also have used Sekai Viewer for more than 6 months. We have also 3 new users who just knew Sekai Viewer within four weeks.</p><p><img src="/images/2021-10-16-20-17-19.png" alt="How long have you used Sekai Viewer?"></p><p>The fans of “<a href="https://sekai.best/unit/school_refusal">25ji, Night-cord de</a>“ and “<a href="https://sekai.best/unit/theme_park">Wonderlands X Showtime</a>“ stand as equals. 26 players vote WxS while 25 vote 25ji. “<a href="https://sekai.best/unit/piapro">Virtual Singer</a>“ is the least favored unit with only 9 fans here.</p><p><img src="/images/2021-10-16-20-25-05.png" alt="Your favorite unit"></p><p>The most favorite character is the “mystery” member of 25ji “<a href="https://sekai.best/chara/20">Akiyama Mizuki</a>“. Another member of 25ji “<a href="https://sekai.best/chara/19">Shinonome Ena</a>“ ties the second place with the title virtual singer “Hatsune Miku”. The two male characters from WxS “<a href="https://sekai.best/chara/13">Tenma Tsukasa</a>“ and “<a href="https://sekai.best/chara/16">Kamishiro Rui</a>“ almost shares the third place.</p><p><img src="/images/2021-10-16-20-34-12.png" alt="Your favorite character(s)"></p><p>The answers to the question “Your favorite song(s)” almost figure out all songs in Project Sekai. The most frequent one is <a href="https://sekai.best/music/116">ID SMILE</a>. Other popular songs are <a href="https://sekai.best/music/138">KING</a> and <a href="https://sekai.best/music/149">Kanade Tomosu Sora</a>.</p><p>Project Sekai players also love to challenge difficult charts, 6 of them are able to survive charts with difficulty 33. There are only four songs have master chart with such difficulty: <a href="https://sekai.best/music/49">The Disappearance of Hatsune Miku</a>, <a href="https://sekai.best/music/131">The Intense Voice of Hatsune Miku</a>, <a href="https://sekai.best/music/135">Roku-chou Nen to Ichiya Monogatari</a>, <a href="https://sekai.best/music/176">Machine gun poem doll</a>. Another 42 players are able to survive charts with difficulty over 30. It is not an easy job to survive such charts. Most players are able to handle “Expert” charts.</p><p><img src="/images/2021-10-16-20-50-02.png" alt="The chart difficulty you can survive"></p><p>Players also compete to reach high ranking in the events. 12 of them reached within the rankings of first 1000, I must give my respect to them while they must have played very intensive during the event. About half of participants got rankings within 10k, nine players never got rankings within 100k which means they missed the title reward.</p><p><img src="/images/2021-10-16-20-59-27.png" alt="The highest rank you ever got in an event"></p><p>The most used tool on Sekai Viewer is, with no doubt, the Story Reader. It enables you to read various stories, talks etc from Project Sekai. The translation of story lines are one of the most wanted feature, and I will make it. Another popular tool is Event Tracker, users love to watch the scores before event ended to secure their rankings.</p><p><img src="/images/2021-10-16-21-07-15.png" alt="Which tools do you use most?"></p><p>The least used tool is Song Recommender and Event Planner, users got confused with them and the tools is also not very user-friendly.</p><p><img src="/images/2021-10-16-21-10-21.png" alt="Which tools do you use least?"></p><p>Other answers are too informative and contains some sensitive data, so I would not like to show them.</p><p>Last but not least, 60 participants attend the giveaway campaign, after filtering out invalid participants whose Twitter account does not show up in <a href="https://twitter.com/SekaiViewer">@SekaiViewer</a>‘s follower list, 52 participants are eligible to join the gift distribution. There are 2 Colorful Passes and 1 Premium Mission Pass distributed. The winners have been drawn with <a href="https://commentpicker.com/random-name-picker.php">Random Name Picker</a>. @SekaiViewer will contact the winners per DM. After gift distribution is completed, I will make the twitter name of winners public.</p></body></html>]]></content:encoded>
      
      
      
      <category domain="https://blog.dna.moe/tags/Project-Sekai/">Project Sekai</category>
      
      <category domain="https://blog.dna.moe/tags/Sekai-Viewer/">Sekai Viewer</category>
      
      <category domain="https://blog.dna.moe/tags/anniversary/">anniversary</category>
      
      <category domain="https://blog.dna.moe/tags/giveaway/">giveaway</category>
      
      
      <comments>https://blog.dna.moe/2021/10/16/sekai-viewer-first-anniversary-survey-results/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Sekai Viewer&#39;s first anniversary</title>
      <link>https://blog.dna.moe/2021/10/01/sekai-viewer-first-anniversary/</link>
      <guid>https://blog.dna.moe/2021/10/01/sekai-viewer-first-anniversary/</guid>
      <pubDate>Fri, 01 Oct 2021 19:02:12 GMT</pubDate>
      
      <description>&lt;p&gt;Hello everyone, DNARoma here. On 9&amp;#x2F;30, just past few days ago, Project Sekai feat. Hatsune Miku has just celebrated its first anniversary. On 10&amp;#x2F;08, which is just a few days from now, the database and tools site Sekai Viewer, which is created by me together with countless contributors, will celebrate its first anniversary too.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<html><head></head><body><p>Hello everyone, DNARoma here. On 9/30, just past few days ago, Project Sekai feat. Hatsune Miku has just celebrated its first anniversary. On 10/08, which is just a few days from now, the database and tools site Sekai Viewer, which is created by me together with countless contributors, will celebrate its first anniversary too.</p><span id="more"></span><h2 id="How-was-Sekai-Viewer-started"><a href="#How-was-Sekai-Viewer-started" class="headerlink" title="How was Sekai Viewer started"></a>How was Sekai Viewer started</h2><p>At first, I must give special thanks to Burrito, whose Bestdori encouraged me to create Sekai Viewer, and RayFirefist, who created SekaiDB before me and decided to cooperate with me.</p><p>I noticed the mobile rhythm game about Hatsune Miku very early because I’m a big fan of her. It was planned to be available on 2020/04, but due to Covid-19 pandemic, its release date was postponed to 2020/09/30. Since it is very similar to Bandori, I spent some time to analyze the master data and file structure, and wrote a first version of Sekai Viewer. At that time, there are only few information pages like Cards, Songs, Gachas, Events. The first tools available is Event Tracker since the first event is about to start.</p><p>The first commit of Sekai Viewer was pushed on 2020/10/07. On the second day, 2020/10/08, the website is published through GitHub Pages. At that time, the domain is <a href="https://sekai-world.github.io/">https://sekai-world.github.io</a>. After a discussion and short vote in Discord server, the current domain <a href="https://sekai.best/">https://sekai.best</a> is decided. At that time I still want <code>sek.ai</code> however it costs too much.</p><p>As the slogan which I used for the first twitter of <a href="https://twitter.com/sekaiviewer">@SekaiViewer</a> says, Sekai Viewer is a website made by fans (I and many contributors) for fans (users like you who are reading this).</p><h2 id="First-anniversary-and-the-survey"><a href="#First-anniversary-and-the-survey" class="headerlink" title="First anniversary and the survey"></a>First anniversary and the survey</h2><p>This year, Covid-19 pandemic was not stopped as expected. The variants made the situation even worse. It is not an easy year for all of us. But still, things are getting better, and time files. It is so sudden that Project Sekai and Sekai Viewer reached its first anniversary. I still feel like the game and my website was launched just yesterday.</p><p>In this year, I am not alone. I met many people by creating this website, by playing this game. Although we are not able to travel around the world as usual, we are connected in this “Sekai”. Here at the first anniversary, I want to hear more from you, so I prepared a survey to collect user experience and run a giveaway campaign.</p><p>You can fill this survey with this link: <a href="https://forms.gle/3vg7E1XEbk85p7oF8">https://forms.gle/3vg7E1XEbk85p7oF8</a>. To ensure the quality of this survey, there are two simple verification questions at first step. Please feel free to answer the questions. I need your real feedback to help me improve Sekai Viewer. This survey will start from 2021/10/02 00:00 (JST) and end at 2021/10/07 23:59 (JST).</p><p>At the end of this survey, you can choose to attend the giveaway campaign or not. If you decided to attend, you must follow <a href="https://twitter.com/sekaiviewer">@SekaiViewer</a>, and fill in your account in order to have chance to receive gift. The giveaway gifts will include several Colorful Pass (amount depends on number of attendees) and Premium Mission Pass (not guaranteed, amount depends on number of attendees). I will announce them after surveys are collected.</p><h2 id="The-future-about-Sekai-Viewer"><a href="#The-future-about-Sekai-Viewer" class="headerlink" title="The future about Sekai Viewer"></a>The future about Sekai Viewer</h2><p>The version update frequency of Sekai Viewer is slow down because I have little time to work on it. After this period, I may have more time on this project and keep it always up to date.</p><p>This is why I held this survey at first anniversary. You suggestions, ideas and supports can encourage me a lot to make Sekai Viewer better. First anniversary is a milestone, but the way of future is still long to go.</p><h2 id="The-end"><a href="#The-end" class="headerlink" title="The end"></a>The end</h2><p>Last but not least, I want to say THANK YOU to all of you, for your kindly help, contribution and support!</p></body></html>]]></content:encoded>
      
      
      
      <category domain="https://blog.dna.moe/tags/Project-Sekai/">Project Sekai</category>
      
      <category domain="https://blog.dna.moe/tags/Sekai-Viewer/">Sekai Viewer</category>
      
      <category domain="https://blog.dna.moe/tags/anniversary/">anniversary</category>
      
      
      <comments>https://blog.dna.moe/2021/10/01/sekai-viewer-first-anniversary/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Sekai World releases its Live2D plugin</title>
      <link>https://blog.dna.moe/2021/01/11/sekai-world-live2d-plugin/</link>
      <guid>https://blog.dna.moe/2021/01/11/sekai-world-live2d-plugin/</guid>
      <pubDate>Mon, 11 Jan 2021 21:52:43 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;TL-DR&quot;&gt;&lt;a href=&quot;#TL-DR&quot; class=&quot;headerlink&quot; title=&quot;TL;DR&quot;&gt;&lt;/a&gt;TL;DR&lt;/h2&gt;&lt;p&gt;Recently, Sekai Viewer released the Live2D Viewer function. I forked a plugin package called &lt;a href=&quot;https://www.npmjs.com/package/find-live2d3&quot;&gt;find-live2d3&lt;/a&gt;, did some modification and renamed to &lt;a href=&quot;https://www.npmjs.com/package/@sekai-world/find-live2d-v3&quot;&gt;@sekai-world&amp;#x2F;find-live2d-v3&lt;/a&gt;. Release of my package can be found on &lt;a href=&quot;https://www.npmjs.com/package/@sekai-world/find-live2d-v3&quot;&gt;npmjs&lt;/a&gt; and &lt;a href=&quot;https://github.com/Sekai-World/find-live2d-v3&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<html><head></head><body><h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h2><p>Recently, Sekai Viewer released the Live2D Viewer function. I forked a plugin package called <a href="https://www.npmjs.com/package/find-live2d3">find-live2d3</a>, did some modification and renamed to <a href="https://www.npmjs.com/package/@sekai-world/find-live2d-v3">@sekai-world/find-live2d-v3</a>. Release of my package can be found on <a href="https://www.npmjs.com/package/@sekai-world/find-live2d-v3">npmjs</a> and <a href="https://github.com/Sekai-World/find-live2d-v3">GitHub</a>.</p><span id="more"></span><h2 id="What-is-Live2D"><a href="#What-is-Live2D" class="headerlink" title="What is Live2D?"></a>What is Live2D?</h2><blockquote><p>Live2D is a software technology that allows you to create dynamic expressions that breathe life into an original 2D illustration.<br>Live2D is a technique of generating animated 2D graphics, usually anime-style characters, using layered, continuous parts based on a single illustration, without the need of animating frame-by-frame or creating a 3D model.<br><a href="https://www.live2d.com/en/about/">What is Live2D? | Live2D Cubism</a></p></blockquote><h2 id="Live2D-in-Project-Sekai"><a href="#Live2D-in-Project-Sekai" class="headerlink" title="Live2D in Project Sekai"></a>Live2D in Project Sekai</h2><p>Project Sekai use Cubism 3.3 to make the Live2D models. As Cubism promised, all Cubism Live2D SDK version 3+ has backward compatibility. Although the only one <a href="https://www.live2d.com/en/download/cubism-sdk/download-web/">downloadable SDK</a> is version 4.0, it works well with models from 3.3.</p><p>But not like other unity games which also use Live2D, Colorful Palette made some modification on that. To extract the Live2D models from Project Sekai asset bundles, I tried Perfare’s <a href="https://github.com/Perfare/UnityLive2DExtractor">UnityLive2DExtractor</a> at first, unfortunately it doesn’t work. Then I realized a painful fact: I have to extract motions and expression from the bundle files by myself.</p><p>Then I dived into the code of unity live2d extractor to figure out how it works. I believe those code is helpful cause it works with many other games. After that I made it clear how to reconstruct motion json files, I wrote some python code and amazingly they worked! But one big problem is still blocking my way: the field <code>Parameter</code> is a number, not a string, and I don’t know what it means. In other games, Live2D motion bundle has a unity <code>GameObject</code> component in it, it doesn’t appear in the files of Project Sekai. Colorful Palette either hide the <code>GameObject</code> somewhere in other asset bundles, or use another way to determine the <code>Parameter</code> field.</p><p>After a lot of reasearch (which costs me about two days), I found some clue from <a href="https://github.com/Live2D/CubismUnityComponents/tree/develop/Assets/Live2D/Cubism/Samples/Models">Cubism Live2D Unity examples</a>. From Perfare’s code I knew that the <code>Parameter</code> number is crc32 computed from some strings (usually from <code>GameObject</code>), but I’m not sure how was the strings composed. I did some tests and found that I just missed some prefix of the strings. However, I still didn’t know which parameters are available for those motion files.</p><p>I took a look at Cubism Live2D Web SDK, it contains a <code>core</code> module which can decode the moc3 files and read out parameter list. This module is compiled from c/c++ code through EMscripten into js code. I’m not here to decode the machine code, so with my last hope I opened the moc3 file in hex editor. I felt lucky because the structure of parameters in moc3 file is pretty simple. In the start of moc3 file it has some chunks like offset table, telling the offset of each part. The position of parameter table in the offset table is constant, therefore I can read same position to get the offset of parameter table. The parameter table consists of a lot of strings indicating the name of parameter. Tada, I’m on the right way.</p><p>I add some simple code to my python module and most of the parameters are recovered. After some smoke test of my extracted motion jsons I can finally step further.</p><h2 id="Implement-Live2D-in-React"><a href="#Implement-Live2D-in-React" class="headerlink" title="Implement Live2D in React"></a>Implement Live2D in React</h2><p>I have to say, Cubism has a very shitty documentation support for the WebGL SDK. Luckily they wrote a good production-ready working example of the SDK, but it still doesn’t meet my need. After searching on npmjs, I found a package called <a href="https://www.npmjs.com/package/find-live2d3">find-live2d3</a>. It’s really amazing, transformed the official example into a plugin package which can be used out-of-box. I use this package as a good start.</p><p>This package did not provide a GitHub repo address, so I installed it locally and copied everything from <code>node_modules</code> folder. I have to modify this package because:</p><ul><li>The original package did not allow me to specify a canvas container, it creates a full screen container by default.</li><li>The model jsons of Project Sekai does not contain motions and expressions, I have to load them in another way.</li><li>It uses outdated <code>core</code> and <code>framework</code>, which breaks the display of Project Sekai models. I have to update and patch them again.</li></ul><p>Therefore I added <code>el</code> argument to initialize function to allow me give my custom canvas container element. I also added a <code>loadMotions</code> function to model instance which allows me to load motions after loading the model.</p><p>To help others who may also need a plugin package of Live2D, I make it open source. The documentation is not done, I suggest you to read the code.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>As my other datamining work, I learned some <em>useless</em> knowledge again. I figured out how to read moc3 file, how to reconstruct the motion json from <code>AnimateClip</code> of unity Live2D bundle and how to decode the <code>Parameter</code> field of unity Live2D bundle. Furthermore, during the implementation of Live2D Viewer, I knew how to resize a canvas upon window resizing, how to save image in WebGL context. And I do test two models showing at once, it would help the development of Live2D Story Reader.</p></body></html>]]></content:encoded>
      
      
      <category domain="https://blog.dna.moe/categories/Website/">Website</category>
      
      
      <category domain="https://blog.dna.moe/tags/Project-Sekai/">Project Sekai</category>
      
      <category domain="https://blog.dna.moe/tags/Live2D/">Live2D</category>
      
      
      <comments>https://blog.dna.moe/2021/01/11/sekai-world-live2d-plugin/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Project Sekai 试玩版分析</title>
      <link>https://blog.dna.moe/2020/09/08/analyse-project-sekai-trial-version-md/</link>
      <guid>https://blog.dna.moe/2020/09/08/analyse-project-sekai-trial-version-md/</guid>
      <pubDate>Tue, 08 Sep 2020 21:05:08 GMT</pubDate>
      
      <description>&lt;p&gt;世嘉出的新的V家相关游戏&lt;code&gt;Project Sekai&lt;/code&gt;终于出了一个试玩版，也展示了一下世嘉谱师的实力（火花的Master难度吓死人）。整个游戏的音游部分比较类似于世嘉自家的街机音游&lt;code&gt;Chunithm&lt;/code&gt;，音符可以跨多个轨道，只要点中其中覆盖的任意轨道就可以得分。由于本游戏和&lt;code&gt;Bandori&lt;/code&gt;游戏的开发商都是&lt;a href=&quot;https://www.craftegg.co.jp/&quot;&gt;Craft Egg&lt;/a&gt;，可以预见到这就是邦邦换皮游戏，而对游戏的分析也证实了这一点。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<html><head></head><body><p>世嘉出的新的V家相关游戏<code>Project Sekai</code>终于出了一个试玩版，也展示了一下世嘉谱师的实力（火花的Master难度吓死人）。整个游戏的音游部分比较类似于世嘉自家的街机音游<code>Chunithm</code>，音符可以跨多个轨道，只要点中其中覆盖的任意轨道就可以得分。由于本游戏和<code>Bandori</code>游戏的开发商都是<a href="https://www.craftegg.co.jp/">Craft Egg</a>，可以预见到这就是邦邦换皮游戏，而对游戏的分析也证实了这一点。</p><span id="more"></span><h2 id="游戏介绍"><a href="#游戏介绍" class="headerlink" title="游戏介绍"></a>游戏介绍</h2><blockquote><p>《世界计画彩色舞台feat. 初音未来》主要以现实世界中位于日本涩谷附近的地区作为舞台，在这里的初音未来等人与我们在现实世界中对他们的认知相同，作为虚拟歌手演唱着许多创作者们所创作的歌曲；而另一个舞台「世界（SEKAI）」是个从思念所诞生出来的场所，同时在这边也将创造出许多歌曲，本作的主角之一「星乃一歌」在因缘际会下来到了「世界」，并在这里与初音相遇。</p><footer><strong>萌娘百科</strong><cite><a href="https://zh.moegirl.org.cn/zh-hans/%E4%B8%96%E7%95%8C%E8%AE%A1%E5%88%92_%E5%BD%A9%E8%89%B2%E8%88%9E%E5%8F%B0_feat._%E5%88%9D%E9%9F%B3%E6%9C%AA%E6%9D%A5">世界计划 彩色舞台 feat. 初音未来</a></cite></footer></blockquote><div class="video-container"><iframe src="https://www.youtube.com/embed/bOwvg1IVSo8" frameborder="0" loading="lazy" allowfullscreen=""></iframe></div><h2 id="本体解析"><a href="#本体解析" class="headerlink" title="本体解析"></a>本体解析</h2><p>整个解析过程没什么特别之处，老套的<code>il2cppdumper</code>+<code>IDA</code>+<code>Fiddler</code>流程，特别是查看了解析出来的<code>dump.cs</code>之后，一股熟悉的感觉铺面而来。依然是使用AES加密，密钥的获得过程和邦邦几乎没有区别。获得API地址和下载服务器地址的地方也几乎和邦邦完全一样。和邦邦不同的地方在于，它使用<a href="https://msgpack.org/">MessagePack</a>作为内层消息编码，而邦邦使用的是<a href="https://developers.google.com/protocol-buffers">Protobuf</a>。</p><p>理论上<code>Protobuf</code>是比<code>MessagePack</code>编码节约空间的，因为前者不会在消息里传递结构消息（实际上也没有必要，因为结构本质上是服务端和客户端的约定），后者只是把JSON变换了一种编码方式而已。目前邦邦利用<code>Protobuf</code>编码的MasterDB消息已经接近10M，导致Craft Egg最近不得不再套了一层压缩，以减小消息体积。可以预见的是，Project Sekai一定也会再对MasterDB进行压缩，否则大小增长一定会比邦邦快得多。</p><h2 id="资源文件"><a href="#资源文件" class="headerlink" title="资源文件"></a>资源文件</h2><p>本游戏的资源文件下载地址大体构造与邦邦类似，不过地址里出现了一个GUID的部分，很明显这是服务器返回的东西，因为客户端里没有写死这个。后来对API的调查发现，不带任何参数访问API服务器根地址的话就会获得当前服务器支持的游戏配置，其中就有这个GUID的hash。</p><p>下载了两个文件回来之后发现没有办法直接在<code>AssetStudio</code>里读取，用<a href="https://hexed.it/">HexEdit</a>打开之后发现文件头并不是普通的<code>AssetBundle</code>的文件头，只能看到明文的FS字样，而且头四个字节似乎不是<code>AssetBundle</code>的一部分。后来跟双草爷爷交流了之后了解到这东西经过异或加密的。从开头保留有FS可以判断出只有五字节被异或，然后空了几个字节，循环往复。去掉头四个字节并且利用异或还原了文件头之后终于可以顺利解析了。于是写了个脚本下载试用版给的所有资源，并且用我自己写的Unity解包脚本全部拆开，发现得到的数据比游戏里给的东西要多，看来Craft Egg还是弄的不干净，还有些<code>AssetBundle</code>里打包进了不应该出现的东西，文件管理也是够混乱的。</p><p>本来以为音频文件要花点时间去找解密用的key，但是使用邦邦的key直接就解密出了能正常播放的音频，免去了这个步骤。不过这游戏设置key的方式也改变了，尝试跟踪了一下也没找到从内存里读取key的办法，现在用的笔记本性能也很弱，分析<code>libil2cpp.so</code>估计需要一整天，就作罢了。</p><p>打开谱面文件一口老血差点喷出来。虽然还是BMS格式，但是头部有这么一句话：</p><blockquote><p>This file was generated by Ched 2.6.2.0.</p></blockquote><p>于是拿着这句话去搜索了一下，找到了一个叫<a href="https://github.com/paralleltree/Ched">Ched</a>的开源工具，用途嘛……就是制作<code>Chunithm</code>的自制谱。帮世嘉做跟自己街机游戏类似的音游模式还拿不到他们的制谱工具，只能使用开源工具，确实有点黑色幽默的感觉。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这游戏叫换皮其实也不是完全的换皮（相比于某音乐时间），只是使用自己开发框架重新开发了一个游戏，音游部分等等都是重写的，还是做了许多工作。更赞的是那个Virtual Live功能，真正实现在线打call，如果支持AR/VR就更好了。不过，我大概只会选择V家模式，乐团碰不碰看缘分吧。</p></body></html>]]></content:encoded>
      
      
      <category domain="https://blog.dna.moe/categories/Hack/">Hack</category>
      
      
      <category domain="https://blog.dna.moe/tags/unity/">unity</category>
      
      <category domain="https://blog.dna.moe/tags/Project-Sekai/">Project Sekai</category>
      
      
      <comments>https://blog.dna.moe/2020/09/08/analyse-project-sekai-trial-version-md/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>First Kubernetes deployment with microk8s and cert-manager</title>
      <link>https://blog.dna.moe/2020/07/31/study-k8s-with-microk8s/</link>
      <guid>https://blog.dna.moe/2020/07/31/study-k8s-with-microk8s/</guid>
      <pubDate>Fri, 31 Jul 2020 20:10:57 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;code&gt;Docker&lt;/code&gt; is a amazing container platform, it helps fast deploying and scaling service among multiple servers (called &lt;code&gt;cluster&lt;/code&gt;). But &lt;code&gt;Docker&lt;/code&gt; is not good at managing instances on different servers, DevOps need a new software. A great thank to Google, &lt;code&gt;Kubernetes (K8s)&lt;/code&gt; is well fitted for &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;automating deployment, scaling, and management of containerized applications. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In this post I will show my first impression on Kubernetes and how I setup a deployment of &lt;code&gt;MySQL&lt;/code&gt;+&lt;code&gt;PhpMyAdmin&lt;/code&gt;+&lt;code&gt;Nginx&lt;/code&gt; and assign a ssl certificate automatically with &lt;code&gt;cert-manager&lt;/code&gt; and the steps of my troubleshooting.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<html><head></head><body><p><code>Docker</code> is a amazing container platform, it helps fast deploying and scaling service among multiple servers (called <code>cluster</code>). But <code>Docker</code> is not good at managing instances on different servers, DevOps need a new software. A great thank to Google, <code>Kubernetes (K8s)</code> is well fitted for </p><blockquote><p>automating deployment, scaling, and management of containerized applications. </p></blockquote><p>In this post I will show my first impression on Kubernetes and how I setup a deployment of <code>MySQL</code>+<code>PhpMyAdmin</code>+<code>Nginx</code> and assign a ssl certificate automatically with <code>cert-manager</code> and the steps of my troubleshooting.</p><span id="more"></span><h2 id="Kubernetes-and-MicroK8s"><a href="#Kubernetes-and-MicroK8s" class="headerlink" title="Kubernetes and MicroK8s"></a>Kubernetes and MicroK8s</h2><p>The official <a href="k8s.io"><code>Kubernetes</code></a> is mainly for cloud platform who needs to manage many clusters, and the control-panel node (which can also be called <code>master</code> node) is not recommended and not allowed to run any container as default. For a bare metal server (like VPS without upstream K8s support) it’s too heavy. A lightweighted K8s solution like <a href="microk8s.io"><code>MicroK8s</code></a> is the best choice.</p><p><code>MicroK8s</code> is developed by Canonical, the author of <code>Ubuntu</code>, and is</p><blockquote><p>The smallest, simplest, pure production K8s.<br>For clusters, laptops, IoT and Edge, on Intel and ARM.</p></blockquote><p>To install on <code>Ubuntu</code> system is very simple with <code>snapd</code> installed:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo snap install microk8s --classic</span><br></pre></td></tr></tbody></table></figure><p>and it’s done. You can watch the install status with <code>microk8s status --wait-ready</code> if you want. More detailed information about installation see <a href="https://microk8s.io/docs">Offcial Docs</a>.</p><p>For convenience, I recommend running following code:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> kubectl=<span class="string">'microk8s kubectl'</span></span><br><span class="line">microk8s <span class="built_in">enable</span> dns helm <span class="comment"># helm3 is also available</span></span><br><span class="line"><span class="built_in">alias</span> helm=<span class="string">'microk8s helm'</span> <span class="comment"># replace helm with helm3 if you use helm3 in command above</span></span><br></pre></td></tr></tbody></table></figure><h2 id="Secret-Volume-Service-Pod-Ingress"><a href="#Secret-Volume-Service-Pod-Ingress" class="headerlink" title="Secret? Volume? Service? Pod? Ingress?"></a>Secret? Volume? Service? Pod? Ingress?</h2><p>Different from <code>Docker</code>, You’ll face lots of new concepts in order to start a single service:</p><ul><li><code>ConfigMap</code> for providing configuration</li><li><code>Secret</code> for store private or secret information</li><li><code>Volume</code> for providing storage space</li><li><code>Deployment</code> for deploying and scaling service</li><li><code>Pod</code> for running the service instance in container</li><li><code>Ingress</code> for providing service to public network.</li></ul><p>Those description is based on my understandings and may be not accurate enough. It’s really hard to understand how they work at the beginning, but they really helps to seperate configs and instance, allow you to generate different configs from a template for deploying on different nodes in clusters. But talk is cheap, now I show you how I setup a cluster with MySQL, PhpMyAdmin, Nginx.</p><h2 id="Deploy-first-service"><a href="#Deploy-first-service" class="headerlink" title="Deploy first service"></a>Deploy first service</h2><h3 id="PersistentVolume-and-PersistentVolumeClaim"><a href="#PersistentVolume-and-PersistentVolumeClaim" class="headerlink" title="PersistentVolume and PersistentVolumeClaim"></a><code>PersistentVolume</code> and <code>PersistentVolumeClaim</code></h3><p>Let’s setup a MySQL service as a try. As a container will lost its data after shutdown, I need a <code>PersistentVolume</code> to persist database. A <code>PersistentVolume</code> is like a disk for containers, every container can claim some space from it, therefore a extra <code>PersistentVolumeClaim</code> is needed.</p><p>All configuration file is written in <a href="https://en.wikipedia.org/wiki/YAML"><code>yaml</code></a> format, and a <code>yaml</code> config file can contain multiple configs. The following code shows a <code>PersistentVolume</code> and a <code>PersistentVolumeClaim</code> for MySQL database storage:</p><script src="//gist.github.com/178b3b187aa329c01b27d90a7b38709c.js?file=mysql-pv.yaml"></script><p>Assuming the above code is written in <code>mysql-pv.yaml</code>, run following code to create the actual resources:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f mysql-pv.yaml</span><br></pre></td></tr></tbody></table></figure><p>and check if the resource is sucessfully created:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pv</span><br><span class="line">NAME              CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                    STORAGECLASS   REASON   AGE</span><br><span class="line">mysql-pv-volume   2Gi        RWO            Retain           Bound    default/mysql-pv-claim   manual                  1m</span><br><span class="line"></span><br><span class="line">$ kubectl get pvc</span><br><span class="line">NAME             STATUS   VOLUME            CAPACITY   ACCESS MODES   STORAGECLASS   AGE</span><br><span class="line">mysql-pv-claim   Bound    mysql-pv-volume   2Gi        RWO            manual         1m</span><br></pre></td></tr></tbody></table></figure><h3 id="Deployment-and-Service"><a href="#Deployment-and-Service" class="headerlink" title="Deployment and Service"></a><code>Deployment</code> and <code>Service</code></h3><p>The next step is to create a <code>Deployment</code> configuration and a <code>Service</code> configuration. The <code>PersistentVolumeClaim</code> created above will be mounted to the <code>Deployment</code>. As a database is a stateful application, we don’t need to take care of scaling problem.</p><script src="//gist.github.com/178b3b187aa329c01b27d90a7b38709c.js?file=mysql-deployment.yaml"></script><h3 id="Secret"><a href="#Secret" class="headerlink" title="Secret"></a><code>Secret</code></h3><p>To keep the root password safe, it is not directly written in <code>env</code> section, but retrieved from <code>mysql-secret</code>, which is a <code>Secret</code> resource created from following code:</p><script src="//gist.github.com/178b3b187aa329c01b27d90a7b38709c.js?file=mysql-secret.yaml"></script><p>Attention that the value of <code>root_password</code> must be base64 encoded.</p><h3 id="Deploy-MySQL-service"><a href="#Deploy-MySQL-service" class="headerlink" title="Deploy MySQL service"></a>Deploy MySQL service</h3><p>Assume that the two above codes are saved as <code>mysql-deployment.yaml</code> and <code>mysql-secret.yaml</code>, apply them using:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f mysql-secret.yaml</span><br><span class="line">kubectl apply -f mysql-deployment.yaml</span><br></pre></td></tr></tbody></table></figure><p>By creating a <code>Deployment</code> resource, a <code>Pod</code> will also be created to run the instance. The <code>Pod</code> is the real container, backended by <code>containerd</code> by default.</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl describe secret mysql-secret</span><br><span class="line">Name:         mysql-secret</span><br><span class="line">Namespace:    default</span><br><span class="line">Labels:       &lt; none &gt;</span><br><span class="line">Annotations:</span><br><span class="line">Type:         Opaque</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">root_password:  16 bytes</span><br><span class="line"></span><br><span class="line">$ kubectl get deploy -l app=mysql</span><br><span class="line">NAME    READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">mysql   1/1     1            1           3m</span><br><span class="line"></span><br><span class="line">$ kubectl get pod -l app=mysql</span><br><span class="line">NAME                    READY   STATUS    RESTARTS   AGE</span><br><span class="line">mysql-75b7c7dcb-qmxqg   1/1     Running   1          3m</span><br><span class="line"></span><br><span class="line">$ kubectl get svc -l app=mysql</span><br><span class="line">NAME    TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE</span><br><span class="line">mysql   ClusterIP   10.152.***.***   &lt; none &gt;      3306/TCP   3m</span><br></pre></td></tr></tbody></table></figure><p>Now try connecting to the mysql instance to see if the deployment succeeds.</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl run -it --<span class="built_in">rm</span> --image=mysql:5.6 --restart=Never mysql-client -- mysql -h mysql -p[your password]</span><br></pre></td></tr></tbody></table></figure><p>It will run a instant <code>Pod</code> running MySQL version 5.6 and call mysql client command to connect local mysql service. If you see a error message like <code>Unknown mysql server host 'mysql'</code>, it means that your deployment is not correct or you didn’t enable dns addon. You can follow steps in <a href="https://kubernetes.io/docs/tasks/administer-cluster/dns-debugging-resolution/">official guide</a> to check your dns addon working state. When everything works, you can see following prompt:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">If you dont see a <span class="built_in">command</span> prompt, try pressing enter.</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></tbody></table></figure><p>You can try executing some MySQL command here to check if MySQL server really works.</p><h2 id="Deploy-PhpMyAdmin"><a href="#Deploy-PhpMyAdmin" class="headerlink" title="Deploy PhpMyAdmin"></a>Deploy <code>PhpMyAdmin</code></h2><p>It’s time to deploy more services. Next one is <code>PhpMyAdmin</code>, a popular database management web application written in PHP. I recommend you use the default docker image branch instead of the <code>fpm</code> branch, at least I didn’t make the <code>fpm</code> image work properly.</p><p>With following code you can deploy a pma service in one configuration file. Remember to set <code>PMA_ABSOLUTE_URI</code> to the real public uri you want to use in development or production.</p><script src="//gist.github.com/178b3b187aa329c01b27d90a7b38709c.js?file=pma-deployment.yaml"></script><p>Then run following command to apply the configuration:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f pma-deployment.yaml</span><br></pre></td></tr></tbody></table></figure><p>and check the status of this deployment:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get deploy -l app=pma</span><br><span class="line">NAME   READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">pma    1/1     1            1           1m</span><br><span class="line"></span><br><span class="line">$ kubectl get svc pma-service</span><br><span class="line">NAME          TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)   AGE</span><br><span class="line">pma-service   ClusterIP   10.152.***.***   &lt; none &gt;      80/TCP    1m</span><br></pre></td></tr></tbody></table></figure><h2 id="Deploy-Nginx-with-Nginx-Ingress-and-secure-with-cert-manager"><a href="#Deploy-Nginx-with-Nginx-Ingress-and-secure-with-cert-manager" class="headerlink" title="Deploy Nginx with Nginx-Ingress and secure with cert-manager"></a>Deploy <code>Nginx</code> with <code>Nginx-Ingress</code> and secure with <code>cert-manager</code></h2><p>Until now the deployed service is not able to be accessed from externel network, even not able from localhost. To allow external access, an <code>Ingress</code> resource will be created. Furthermore, the web service will be secured with a ssl certificate.</p><h3 id="Use-Nginx-Ingress-to-deploy-nginx-service"><a href="#Use-Nginx-Ingress-to-deploy-nginx-service" class="headerlink" title="Use Nginx-Ingress to deploy nginx service"></a>Use <code>Nginx-Ingress</code> to deploy nginx service</h3><p><a href="https://kubernetes.github.io/ingress-nginx/"><code>Nginx-Ingress</code></a> allows you deploy nginx service with some simple commands, based on <code>Kubernetes Ingress</code>, use <code>ConfigMap</code> to auto configure nginx. All you need to do is install it and write a <code>Ingress</code> config file and then all done.</p><p>I recommend you use <code>helm</code> to install <code>Nginx-Ingress</code> using <code>microk8s enable helm</code>, replace <em>helm</em> with <em>helm3</em> if you want to use <code>helm3</code>. You will also need a <em>tiller</em> account for <code>helm</code>:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl create serviceaccount tiller --namespace=kube-system</span><br><span class="line">serviceaccount <span class="string">"tiller"</span> created</span><br><span class="line"></span><br><span class="line">$ kubectl create clusterrolebinding tiller-admin --serviceaccount=kube-system:tiller --clusterrole=cluster-admin</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io <span class="string">"tiller-admin"</span> created</span><br><span class="line"></span><br><span class="line">$ helm init --service-account=tiller</span><br><span class="line"><span class="variable">$HELM_HOME</span> has been configured at /Users/myaccount/.helm.</span><br><span class="line"></span><br><span class="line">Tiller (the Helm server-side component) has been installed into your Kubernetes Cluster.</span><br><span class="line"></span><br><span class="line">Please note: by default, Tiller is deployed with an insecure <span class="string">'allow unauthenticated users'</span> policy.</span><br><span class="line">To prevent this, run `helm init` with the --tiller-tls-verify flag.</span><br><span class="line">For more information on securing your installation see: https://docs.helm.sh/using_helm/<span class="comment">#securing-your-helm-installation</span></span><br><span class="line">Happy Helming!</span><br></pre></td></tr></tbody></table></figure><p>Then run <code>helm repo update</code> to update official repo. Assume that install service name is <em>nginx</em>, run <code>helm install stable/nginx-ingress --name nginx</code> to install <code>Nginx-Ingress</code> controller. But by default it requires a <code>LoadBalancer</code> to assign an external ip to the controller. As a bare metal server, the provider will not give an upstream <code>LoadBalancer</code> support. If you really want to use <code>LoadBalancer</code> you can install <a href="https://metallb.universe.tf/"><code>MetalLB</code></a> which is still in beta phase and you need some IP available. I recommend using <code>NodePort</code> mode rather than <code>LoadBalancer</code> for convenience.</p><p><code>Helm</code> supports config override using <em>values</em>. At <a href="https://hub.helm.sh/charts/nginx/nginx-ingress"><code>Helm Hub</code> page</a> the configurable values are listed. Values can be set in command like <code>--set config.service.type=NodePort</code>, or in a file:</p><script src="//gist.github.com/178b3b187aa329c01b27d90a7b38709c.js?file=nginx-value.yaml"></script><p>Remember to assign the external IP to your server IP. Check controller service status:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get svc -l app=nginx-ingress</span><br><span class="line">NAME                                  TYPE        CLUSTER-IP       EXTERNAL-IP        PORT(S)                      AGE</span><br><span class="line">nginx-nginx-ingress-controller        NodePort    10.152.***.***   [your server ip]   80:30123/TCP,443:30456/TCP   1m</span><br><span class="line">nginx-nginx-ingress-default-backend   ClusterIP   10.152.***.***   &lt; none &gt;           80/TCP                       1m</span><br></pre></td></tr></tbody></table></figure><p>You can access <code>http://[your server ip]:30123</code> and get a default backend response with 404.</p><h3 id="Expose-PhpMyAdmin-using-Ingress"><a href="#Expose-PhpMyAdmin-using-Ingress" class="headerlink" title="Expose PhpMyAdmin using Ingress"></a>Expose <code>PhpMyAdmin</code> using <code>Ingress</code></h3><p>The <code>Nginx-Ingress</code> controller supports exposing a service with <code>Ingress</code> configuration, where I just need to point desired host, path and reverse proxy (backend). A sample yaml is shown below:</p><script src="//gist.github.com/178b3b187aa329c01b27d90a7b38709c.js?file=pma-ingress.yaml"></script><p>and comment out line 6 and line 18-21 to disable tls for now. It means that we expose the backend service <code>pma-service</code> to host, reverse proxy any request sent to the host (domain) to port 80 of <code>pma-service</code>. Apply this yaml using:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f pma-ingress.yaml</span><br></pre></td></tr></tbody></table></figure><p>and check ingress status:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl get ingress</span><br><span class="line">NAME   CLASS    HOSTS            ADDRESS          PORTS     AGE</span><br><span class="line">pma    &lt; none &gt; [your hostname]  [your server ip] 80, 443   24h</span><br></pre></td></tr></tbody></table></figure><p>the address could be <em>pending</em> for a while because the <code>Ingress</code> will send config to the <code>Nginx-Ingress</code> controller and wait it to activate. Once your server ip is shown in the <code>ADDRESS</code> field, you can access the host you set in <code>pma-ingress.yaml</code> to test if the ingress works. Remember to point the host to your server ip in DNS provider.</p><h3 id="Secure-Web-Application-with-SSL"><a href="#Secure-Web-Application-with-SSL" class="headerlink" title="Secure Web Application with SSL"></a>Secure Web Application with SSL</h3><p>Normally I use <code>Let's encrypt</code> to secure the connection using <code>acme.sh</code> script and import private key and public certificate in Nginx virtual host config. But with Kubernetes I can use <a href="https://cert-manager.io/"><code>cert-manager</code></a> to automate this process.</p><p>At first run following commands to install <code>cert-manager</code> with <code>helm</code>:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">kubectl create namespace cert-manager</span><br><span class="line">helm repo add jetstack https://charts.jetstack.io</span><br><span class="line">helm repo update</span><br><span class="line"></span><br><span class="line">helm install \</span><br><span class="line">  --name cert-manager \ <span class="comment"># if you use helm3, delete '--name'</span></span><br><span class="line">  --namespace cert-manager \</span><br><span class="line">  --version v0.16.0 \</span><br><span class="line">  jetstack/cert-manager \</span><br><span class="line">  --<span class="built_in">set</span> installCRDs=<span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure><p>Verify the installation with:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pods --namespace cert-manager</span><br><span class="line">NAME                                       READY   STATUS    RESTARTS   AGE</span><br><span class="line">cert-manager-c456f8b56-4wkq7               1/1     Running   0          1m</span><br><span class="line">cert-manager-cainjector-6b4f5b9c99-tqp5c   1/1     Running   0          1m</span><br><span class="line">cert-manager-webhook-5cfd5478b-kd69h       1/1     Running   0          1m</span><br></pre></td></tr></tbody></table></figure><p>Then create two <code>Issuer</code>, this is a new type imported by <code>cert-manager</code>. The one is for test using staging acme server, one is for production using real acme server.</p><script src="//gist.github.com/178b3b187aa329c01b27d90a7b38709c.js?file=le-staging.yaml"></script><script src="//gist.github.com/178b3b187aa329c01b27d90a7b38709c.js?file=le-prod.yaml"></script><p>The class name defined at line 18 must match the class name set in <code>pma-ingress.yaml</code> at line 5. The generated cert will be stored in <code>Secret</code>, name is defined at line 13 (<em>privateKeySecretRef.name</em>). Apply them using:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f le-staging.yaml</span><br><span class="line">kubectl apply -f le-prod.yaml</span><br></pre></td></tr></tbody></table></figure><p>You can check the status of issuer with <code>kubectl describe issuer letsencrypt-staging</code> or <code>kubectl describe issuer letsencrypt-prod</code>.</p><h3 id="Sign-SSL-Certificate-and-Deploy"><a href="#Sign-SSL-Certificate-and-Deploy" class="headerlink" title="Sign SSL Certificate and Deploy"></a>Sign SSL Certificate and Deploy</h3><p>Uncomment line 6 and line 18-21 in <code>pma-ingress.yaml</code>, replace the value at line 6 with <em>letsencrypt-staging</em> for testing purpose. Then apply this ingress config again. Check the status of certificate:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get certificate</span><br><span class="line">NAME      READY   SECRET    AGE</span><br><span class="line">pma-tls   True    pma-tls   3m</span><br></pre></td></tr></tbody></table></figure><p>until the field <code>READY</code> become <code>True</code>. If it is always <code>False</code> you can check detailed information about the certificate using <code>kubectl describe certificate pma-tls</code>.</p><p>The certificate is expected to be stored in <code>pma-tls</code>:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl describe secret pma-tls</span><br><span class="line">Name:         pma-tls</span><br><span class="line">Namespace:    default</span><br><span class="line">Labels:       &lt; none &gt;</span><br><span class="line">Annotations:  cert-manager.io/alt-names: [your hostname]</span><br><span class="line">              cert-manager.io/certificate-name: pma-tls</span><br><span class="line">              cert-manager.io/common-name: [your hostname]</span><br><span class="line">              cert-manager.io/ip-sans:</span><br><span class="line">              cert-manager.io/issuer-kind: Issuer</span><br><span class="line">              cert-manager.io/issuer-name: letsencrypt-staging</span><br><span class="line">              cert-manager.io/uri-sans:</span><br><span class="line"></span><br><span class="line">Type:  kubernetes.io/tls</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">tls.crt:  3558 bytes</span><br><span class="line">tls.key:  1679 bytes</span><br></pre></td></tr></tbody></table></figure><p>Try accessing <code>https://[your hostname]/</code>, you will get a certificate warning, it’s normal because the certificate is signed by staging acme server. It means that the certificate issuer is working.</p><p>Replace <code>letsencrypt-staging</code> with <code>letsencrypt-prod</code> at line 6 in <code>pma-ingress.yaml</code>, delete the secret <code>pma-tls</code> using</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete secret pma-tls</span><br></pre></td></tr></tbody></table></figure><p>and apply the <code>pma-ingress.yaml</code> again. Then wait a few minutes until new certificate is ready.</p><p>Now you should be able to access <code>https://[your hostname]/</code> without any certificate warning, otherwise check if you forget to delete old <code>pma-tls</code> secret, or the certificate issue process is erroneous (execute <code>kubectl describe certificate pma-tls</code> to check the status).</p><h2 id="Afterword"><a href="#Afterword" class="headerlink" title="Afterword"></a>Afterword</h2><p>At the very beginning, the Kubernetes seems a little bit scared and complicated. I need to write some configuration yaml files to setup just one service. But it has great profit: I don’t need to set every config by myself, I don’t need to write nginx config, run acme.sh commands etc. And I can deploy another cluster with same configuration files in just a few minutes. With <code>kustomize</code> it’s quiet easy to generete and reuse configurations among clusters (see <a href="https://github.com/kubernetes-sigs/kustomize">GitHub repo</a> and <a href="https://kubernetes.io/blog/2018/05/29/introducing-kustomize-template-free-configuration-customization-for-kubernetes/">this blog post</a>).</p><p>An obvious disadvantage is relatively high memory usage, for example my <code>Kubernetes</code> configuration will eat up to 1.5 GiB memory. The recommended memory, according to <code>microk8s</code> official docs, is 4GiB. But anyway, <code>Kubernetes</code> worth a try.</p></body></html>]]></content:encoded>
      
      
      <category domain="https://blog.dna.moe/categories/DevOps/">DevOps</category>
      
      
      <category domain="https://blog.dna.moe/tags/kubernetes/">kubernetes</category>
      
      <category domain="https://blog.dna.moe/tags/microk8s/">microk8s</category>
      
      <category domain="https://blog.dna.moe/tags/cert-manager/">cert-manager</category>
      
      <category domain="https://blog.dna.moe/tags/mysql/">mysql</category>
      
      <category domain="https://blog.dna.moe/tags/phpmyadmin/">phpmyadmin</category>
      
      <category domain="https://blog.dna.moe/tags/nginx/">nginx</category>
      
      <category domain="https://blog.dna.moe/tags/letsencrypt/">letsencrypt</category>
      
      
      <comments>https://blog.dna.moe/2020/07/31/study-k8s-with-microk8s/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Coming breaking changes about Bandori Database, the future and more</title>
      <link>https://blog.dna.moe/2020/07/16/coming-changes-bandori-database/</link>
      <guid>https://blog.dna.moe/2020/07/16/coming-changes-bandori-database/</guid>
      <pubDate>Thu, 16 Jul 2020 12:07:23 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;TL-DR&quot;&gt;&lt;a href=&quot;#TL-DR&quot; class=&quot;headerlink&quot; title=&quot;TL;DR&quot;&gt;&lt;/a&gt;TL;DR&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Bandori Database&lt;/code&gt; will be &lt;strong&gt;renamed&lt;/strong&gt; to &lt;code&gt;Bandori Top&lt;/code&gt; with new domain &lt;a href=&quot;https://bandori.top/&quot;&gt;bandori.top&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The old domains &lt;em&gt;bandori.ga&lt;/em&gt; and &lt;em&gt;bangdream.ga&lt;/em&gt; will be abandoned in the near future.&lt;/li&gt;
&lt;li&gt;All requests to old domains will be &lt;code&gt;301 permanent redirect&lt;/code&gt; to new domain.&lt;/li&gt;
&lt;li&gt;More stable and robust auto update of datas and assets.&lt;/li&gt;
&lt;li&gt;New design of pages and offline cache.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.transifex.com/bandori-top/bandori-top-website/&quot;&gt;Crowdin Translation&lt;/a&gt; support.&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<html><head></head><body><h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h2><ul><li><code>Bandori Database</code> will be <strong>renamed</strong> to <code>Bandori Top</code> with new domain <a href="https://bandori.top/">bandori.top</a>.</li><li>The old domains <em>bandori.ga</em> and <em>bangdream.ga</em> will be abandoned in the near future.</li><li>All requests to old domains will be <code>301 permanent redirect</code> to new domain.</li><li>More stable and robust auto update of datas and assets.</li><li>New design of pages and offline cache.</li><li><a href="https://www.transifex.com/bandori-top/bandori-top-website/">Crowdin Translation</a> support.</li></ul><span id="more"></span><h2 id="Domain-and-name-changes"><a href="#Domain-and-name-changes" class="headerlink" title="Domain and name changes"></a>Domain and name changes</h2><p>I configured an automatic update of the certificates for my domains, but about two weeks before, someone reported that the cert of my api server was expired. I thought it must be the scripts not working again. Unfortunately, I manually ran the command, then error occurred. The log showed a strange error message:</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">{</span><span class="attr">"error"</span><span class="punctuation">:</span> <span class="string">"You cannot use this API for domains with a .cf, .ga, .gq, .ml, or .tk TLD (top-level domain). To configure the DNS settings for this domain, use the Cloudflare Dashboard."</span><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure><p>It was really a shock for me. After some googling I realized that CloudFlare <a href="https://community.cloudflare.com/t/unable-to-update-ddns-using-api-for-some-tlds/167228">banned free domains from using API</a>. I mainly use CloudFlare API for assign wildcard certificates, and from now on I can’t do it anymore with my “free” domains. It reminds me of the fact that anything free may be not stable. OK, it’s time to say goodbye to free domains.</p><p>After some search acorss different domains and domain registrars, I picked <code>bandori.top</code>. I will move all <code>Bandori Database</code> services to this domain, and, to match the new domain, I made the decision rename it to <code>Bandori Top</code>.</p><h2 id="Website-changes"><a href="#Website-changes" class="headerlink" title="Website changes"></a>Website changes</h2><p>It’s been a quiet long time that I didn’t change anything on Bandori Database except bug fixes. I planned some features before but they still on the pending feature list. To tell the truth, I’m not good at designing, and the user expericence of Bandori Database is far from convenient. Sometimes the auto update feature also fails. In the past months I made some changes about backend, making it more reliable and robust, and they are not public at this moment. As the changes is so breaking, I have to modify a lot of codes of frontend and API, so I decided to improve Bandori Database and introduce some new features.</p><p>The following parts might contain some technical details and are not friendly for normal users.</p><h3 id="Backend-and-API"><a href="#Backend-and-API" class="headerlink" title="Backend and API"></a>Backend and API</h3><p><code>Bandori Top API Service</code> is a RESTful API service. Current versioning, from start of service never changed, is <code>v1</code>. But because the backend will directly use the proto definition extracted from the code, many entries and key names are changed, most api will have a new version <code>v2</code>. As <code>v1</code> endpoints may still work, some key may have changed and you should follow those changes to prevent crash of your programs which use <code>Bandori Top API Service</code>.</p><h3 id="New-page-design"><a href="#New-page-design" class="headerlink" title="New page design"></a>New page design</h3><p>I have to say, I’m not good at representing data in a “beautiful” way. I decided to redesign the pages again to make them more clear and to display more <strong>useful</strong> information. Gachas will be removed from home page and moved to separate page. Event history will be presented in a new page supporting by a backend database. Card detail and song detail page will also have more information.</p><h3 id="Bug-fixes"><a href="#Bug-fixes" class="headerlink" title="Bug fixes"></a>Bug fixes</h3><p>Yet some bugs make some important features unavailable, like Live2D and music chart viewer. They have something to do with backend and with new backend version they will be fixed.</p><h3 id="Crowdin-Translation"><a href="#Crowdin-Translation" class="headerlink" title="Crowdin Translation"></a>Crowdin Translation</h3><p><code>Bandori Top</code> support multi languages, but some translations are missing in Korean and Japanese. Now with new Crowdin Translation feature, you can help improving the translations! More info see <a href="https://www.transifex.com/bandori-top/bandori-top-website/">project page</a>. You may need a account for submitting new translations, and I can invite you to collaborate.</p><h3 id="Offline-cache-with-IndexedDB"><a href="#Offline-cache-with-IndexedDB" class="headerlink" title="Offline cache with IndexedDB"></a>Offline cache with IndexedDB</h3><p><code>IndexedDB</code> is a useful tool for <code>Progressive Web Appliaction (PWA)</code>. PWA is aimed to create “experience like native apps”, so offline use and offline cache is important to such apps. <code>IndexedDB</code> is the tool exact for this task. And with offline cache, your access to <code>Bandori Top</code> will be blazing fast because most data will be retrieved from cache. I will do some optimizations to ensure cached data up to date and you will not see deprecated data if you are online.</p></body></html>]]></content:encoded>
      
      
      <category domain="https://blog.dna.moe/categories/Website/">Website</category>
      
      
      <category domain="https://blog.dna.moe/tags/Bandori-Database/">Bandori Database</category>
      
      <category domain="https://blog.dna.moe/tags/Breaking-Changes/">Breaking Changes</category>
      
      <category domain="https://blog.dna.moe/tags/Bandori-Top/">Bandori Top</category>
      
      
      <comments>https://blog.dna.moe/2020/07/16/coming-changes-bandori-database/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Generating Proto File For Bangdream 4.0.0 (V2)</title>
      <link>https://blog.dna.moe/2020/03/16/auto-gen-bang-proto-v2/</link>
      <guid>https://blog.dna.moe/2020/03/16/auto-gen-bang-proto-v2/</guid>
      <pubDate>Mon, 16 Mar 2020 11:06:34 GMT</pubDate>
      
      <description>&lt;p&gt;You can check &lt;a href=&quot;/2018/09/15/auto-gen-bang-proto/&quot;&gt;this post&lt;/a&gt; for some background. BangDream now use “on demand” delivery and I can get only arm64 blobs now. They are so different with old armv7 instrcutions so I have to rewrite some code to get correct tag numbers.&lt;/p&gt;
&lt;p&gt;At first, use &lt;strong&gt;latest&lt;/strong&gt; &lt;code&gt;il2cppdumper&lt;/code&gt;, or you may have some errors when running the script. I tried immediately with my old script, and all tag numbers are reported &lt;em&gt;None&lt;/em&gt;. It’s pretty annoying but it should have something to do with new instructions of arm64 (aarch64). Now let’s check what happend.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<html><head></head><body><p>You can check <a href="/2018/09/15/auto-gen-bang-proto/">this post</a> for some background. BangDream now use “on demand” delivery and I can get only arm64 blobs now. They are so different with old armv7 instrcutions so I have to rewrite some code to get correct tag numbers.</p><p>At first, use <strong>latest</strong> <code>il2cppdumper</code>, or you may have some errors when running the script. I tried immediately with my old script, and all tag numbers are reported <em>None</em>. It’s pretty annoying but it should have something to do with new instructions of arm64 (aarch64). Now let’s check what happend.</p><span id="more"></span><h2 id="Disassembly"><a href="#Disassembly" class="headerlink" title="Disassembly"></a>Disassembly</h2><p>Like in armv7, protobuf-net codes are also compiled into two kinds of instructions. Use <code>UserAuthRequest</code> as an example. <code>userId</code> is compiled into:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">08 04 40 F9 E1 03 00 32 E2 03 1F AA 00 01 40 F9 6D 70 78 14</span><br></pre></td></tr></tbody></table></figure><p>With a <a href="http://shell-storm.org/online/Online-Assembler-and-Disassembler/?opcodes=08+04+40+F9+E1+03+00+32+E2+03+1F+AA+00+01+40+F9+6D+70+78+14&amp;arch=arm64&amp;endianness=little&amp;dis_with_addr=True&amp;dis_with_raw=True&amp;dis_with_ins=True#disassembly">online disassembler</a> you can get following instructions:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0x0000000000000000:  08 04 40 F9    ldr x8, [x0, #8]</span><br><span class="line">0x0000000000000004:  E1 03 00 32    orr w1, wzr, #1</span><br><span class="line">0x0000000000000008:  E2 03 1F AA    mov x2, xzr</span><br><span class="line">0x000000000000000c:  00 01 40 F9    ldr x0, [x8]</span><br><span class="line">0x0000000000000010:  6D 70 78 14    b   #0x1e1c1c4</span><br></pre></td></tr></tbody></table></figure><p>and <code>attestationErrorMsg</code> is encoded as:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">F3 0F 1E F8 FD 7B 01 A9 FD 43 00 91 08 04 40 F9 21 01 80 52 ...</span><br></pre></td></tr></tbody></table></figure><p>and processed by <a href="http://shell-storm.org/online/Online-Assembler-and-Disassembler/?opcodes=F3+0F+1E+F8+FD+7B+01+A9+FD+43+00+91+08+04+40+F9+21+01+80+52&amp;arch=arm64&amp;endianness=little&amp;dis_with_addr=True&amp;dis_with_raw=True&amp;dis_with_ins=True#disassembly">disassembler</a>:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0x0000000000000000:  F3 0F 1E F8    str  x19, [sp, #-0x20]!</span><br><span class="line">0x0000000000000004:  FD 7B 01 A9    stp  x29, x30, [sp, #0x10]</span><br><span class="line">0x0000000000000008:  FD 43 00 91    add  x29, sp, #0x10</span><br><span class="line">0x000000000000000c:  08 04 40 F9    ldr  x8, [x0, #8]</span><br><span class="line">0x0000000000000010:  21 01 80 52    movz w1, #0x9</span><br></pre></td></tr></tbody></table></figure><p>The most important instructions are:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">E1 03 00 32    orr w1, wzr, #1</span><br><span class="line"># or</span><br><span class="line">21 01 80 52    movz w1, #0x9</span><br></pre></td></tr></tbody></table></figure><h2 id="Instruction-Encoding"><a href="#Instruction-Encoding" class="headerlink" title="Instruction Encoding"></a>Instruction Encoding</h2><p>But how are the immediate encoded? By checking the <a href="https://developer.arm.com/docs/ddi0487/latest/arm-architecture-reference-manual-armv8-for-armv8-a-architecture-profile">reference</a> and the <a href="http://kitoslab-eng.blogspot.com/2012/10/armv8-aarch64-instruction-encoding.html">instruction encoding</a> I figured out that <code>MOVZ</code> use direct immediate and <code>ORR</code> use bitmask immediate. Although they are aarch64 instructions, both of them use 32 bit immediate.</p><p>The direct immediate is pretty <em>direct</em>, just read the immediate and it’s finished:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x10x 0010 1xxi iiii iiii iiii iiid dddd</span><br></pre></td></tr></tbody></table></figure><p>But how about bitmask immediate? They are like the rotating encoding of immediate in armv7 but have some different. <code>ORR</code> immediate instruction looks like this:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x01x 0010 0Nii iiii iiii iinn nnnd dddd</span><br></pre></td></tr></tbody></table></figure><p><code>N</code> together with first <em>x</em> (as known as <code>sf</code>) refers to bit length (<code>sf==0 AND N==0</code> =&gt; 32bit or <code>sf==1</code> =&gt; 64bit), first six binary digits of immediate are <code>immr</code> and last six binary digits of immediate are <code>imms</code>. You can find the code to decode bitmask immediate in the arm official reference:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DecodeBitMasks()</span></span><br><span class="line"><span class="comment">// ================</span></span><br><span class="line"><span class="comment">// Decode AArch64 bitfield and logical immediate masks which use a similar encoding structure</span></span><br><span class="line"></span><br><span class="line">(bits(M), bits(M)) DecodeBitMasks(bit immN, bits(<span class="number">6</span>) imms, bits(<span class="number">6</span>) immr, <span class="type">boolean</span> immediate)</span><br><span class="line">  bits(M) tmask, wmask;</span><br><span class="line">  bits(<span class="number">6</span>) levels;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Compute log2 of element size</span></span><br><span class="line">  <span class="comment">// 2^len must be in range [2, M]</span></span><br><span class="line">  len = HighestSetBit(immN:NOT(imms));</span><br><span class="line">  <span class="keyword">if</span> len &lt; <span class="number">1</span> then UNDEFINED;</span><br><span class="line">  <span class="keyword">assert</span> M &gt;= (<span class="number">1</span> &lt;&lt; len);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Determine S, R and S - R parameters</span></span><br><span class="line">  levels = ZeroExtend(Ones(len), <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// For logical immediates an all-ones value of S is reserved</span></span><br><span class="line">  <span class="comment">// since it would generate a useless all-ones result (many times)</span></span><br><span class="line">  <span class="keyword">if</span> immediate &amp;&amp; (imms AND levels) == levels then UNDEFINED;</span><br><span class="line"></span><br><span class="line">  S = UInt(imms AND levels);</span><br><span class="line">  R = UInt(immr AND levels);</span><br><span class="line">  diff = S - R; <span class="comment">// 6-bit subtract with borrow</span></span><br><span class="line">  esize = <span class="number">1</span> &lt;&lt; len;</span><br><span class="line">  d = UInt(diff&lt;len-<span class="number">1</span>:<span class="number">0</span>&gt;);</span><br><span class="line"></span><br><span class="line">  welem = ZeroExtend(Ones(S + <span class="number">1</span>), esize);</span><br><span class="line">  telem = ZeroExtend(Ones(d + <span class="number">1</span>), esize);</span><br><span class="line">  wmask = Replicate(ROR(welem, R));</span><br><span class="line">  tmask = Replicate(telem);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (wmask, tmask);</span><br></pre></td></tr></tbody></table></figure><p>But it’s pretty hard to understand. <code>LLVM</code> gives <a href="https://github.com/llvm-mirror/llvm/blob/5c95b810cb3a7dee6d49c030363e5bf0bb41427e/lib/Target/AArch64/MCTargetDesc/AArch64AddressingModes.h#L292">code</a> which is way more clear:</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">uint64_t</span> <span class="title function_">decodeLogicalImmediate</span><span class="params">(<span class="type">uint64_t</span> val, <span class="type">unsigned</span> regSize)</span> {</span><br><span class="line">  <span class="comment">// Extract the N, imms, and immr fields.</span></span><br><span class="line">  <span class="type">unsigned</span> N = (val &gt;&gt; <span class="number">12</span>) &amp; <span class="number">1</span>;</span><br><span class="line">  <span class="type">unsigned</span> immr = (val &gt;&gt; <span class="number">6</span>) &amp; <span class="number">0x3f</span>;</span><br><span class="line">  <span class="type">unsigned</span> imms = val &amp; <span class="number">0x3f</span>;</span><br><span class="line"></span><br><span class="line">  assert((regSize == <span class="number">64</span> || N == <span class="number">0</span>) &amp;&amp; <span class="string">"undefined logical immediate encoding"</span>);</span><br><span class="line">  <span class="type">int</span> len = <span class="number">31</span> - countLeadingZeros((N &lt;&lt; <span class="number">6</span>) | (~imms &amp; <span class="number">0x3f</span>));</span><br><span class="line">  assert(len &gt;= <span class="number">0</span> &amp;&amp; <span class="string">"undefined logical immediate encoding"</span>);</span><br><span class="line">  <span class="type">unsigned</span> size = (<span class="number">1</span> &lt;&lt; len);</span><br><span class="line">  <span class="type">unsigned</span> R = immr &amp; (size - <span class="number">1</span>);</span><br><span class="line">  <span class="type">unsigned</span> S = imms &amp; (size - <span class="number">1</span>);</span><br><span class="line">  assert(S != size - <span class="number">1</span> &amp;&amp; <span class="string">"undefined logical immediate encoding"</span>);</span><br><span class="line">  <span class="type">uint64_t</span> pattern = (<span class="number">1ULL</span> &lt;&lt; (S + <span class="number">1</span>)) - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">unsigned</span> i = <span class="number">0</span>; i &lt; R; ++i)</span><br><span class="line">    pattern = ror(pattern, size);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Replicate the pattern to fill the regSize.</span></span><br><span class="line">  <span class="keyword">while</span> (size != regSize) {</span><br><span class="line">    pattern |= (pattern &lt;&lt; size);</span><br><span class="line">    size *= <span class="number">2</span>;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> pattern;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>OK we can now rewrite our code to get correct tag number.</p><h2 id="New-getTag-Function"><a href="#New-getTag-Function" class="headerlink" title="New getTag Function"></a>New <code>getTag</code> Function</h2><p>Attention that in following code we use <strong>Little-Endian</strong>. In our case, <code>N</code> and <code>sf</code> always equal to 0 so we don’t have to care about length, it’s fixed to 32 bits.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">getTag</span>(<span class="params">address</span>):</span><br><span class="line">  offset = address &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line"></span><br><span class="line">  prog.seek(offset)</span><br><span class="line">  inst = prog.read(<span class="number">4</span>)</span><br><span class="line">  inst = <span class="built_in">int</span>.from_bytes(inst, byteorder=<span class="string">'little'</span>, signed=<span class="literal">False</span>)</span><br><span class="line">  <span class="keyword">if</span> inst == <span class="number">0xf9400408</span>:</span><br><span class="line">    prog.seek(offset + <span class="number">4</span>)</span><br><span class="line">    inst = <span class="built_in">int</span>.from_bytes(prog.read(<span class="number">4</span>), <span class="string">'little'</span>, signed=<span class="literal">False</span>)</span><br><span class="line">  <span class="keyword">elif</span> inst == <span class="number">0xf81e0ff3</span>:</span><br><span class="line">    prog.seek(offset + <span class="number">16</span>)</span><br><span class="line">    inst = <span class="built_in">int</span>.from_bytes(prog.read(<span class="number">4</span>), <span class="string">'little'</span>, signed=<span class="literal">False</span>)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">hex</span>(inst), <span class="built_in">hex</span>(address))</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">  <span class="keyword">if</span> inst &gt;&gt; <span class="number">24</span> == <span class="number">0x52</span>:</span><br><span class="line">    <span class="keyword">return</span> (inst &gt;&gt; <span class="number">5</span>) &amp; <span class="number">0xFFFF</span></span><br><span class="line">  <span class="keyword">elif</span> inst &gt;&gt; <span class="number">24</span> == <span class="number">0x32</span>:</span><br><span class="line">    retnum = (inst &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFFFF</span></span><br><span class="line">    immr = (retnum &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0x3F</span></span><br><span class="line">    imms = (retnum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x3F</span></span><br><span class="line">    clz = <span class="keyword">lambda</span> x: <span class="string">"{:032b}"</span>.<span class="built_in">format</span>(x).index(<span class="string">"1"</span>)</span><br><span class="line">    _<span class="built_in">len</span> = <span class="number">31</span> - clz((<span class="number">0</span> &lt;&lt; <span class="number">6</span>) | (~imms &amp; <span class="number">0x3F</span>))</span><br><span class="line">    _size = <span class="number">1</span> &lt;&lt; _<span class="built_in">len</span></span><br><span class="line">    R = immr &amp; (_size - <span class="number">1</span>)</span><br><span class="line">    S = imms &amp; (_size - <span class="number">1</span>)</span><br><span class="line">    ret = (<span class="number">1</span> &lt;&lt; (S+<span class="number">1</span>)) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(immr):</span><br><span class="line">      ret = rotr(ret, <span class="number">32</span>)</span><br><span class="line">    <span class="keyword">return</span> ret</span><br></pre></td></tr></tbody></table></figure><p>For whole code please see <a href="https://gist.github.com/dnaroma/1bfc901d95f777a340fcb615d6a96bd3#file-genproto_arm64-py">this gist</a>.</p><p>Happy hacking!</p></body></html>]]></content:encoded>
      
      
      <category domain="https://blog.dna.moe/categories/Hack/">Hack</category>
      
      
      <category domain="https://blog.dna.moe/tags/Bandori/">Bandori</category>
      
      <category domain="https://blog.dna.moe/tags/unity/">unity</category>
      
      <category domain="https://blog.dna.moe/tags/il2cpp/">il2cpp</category>
      
      <category domain="https://blog.dna.moe/tags/protobuf/">protobuf</category>
      
      <category domain="https://blog.dna.moe/tags/automation/">automation</category>
      
      
      <comments>https://blog.dna.moe/2020/03/16/auto-gen-bang-proto-v2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Generating Proto File For Bangdream</title>
      <link>https://blog.dna.moe/2018/09/15/auto-gen-bang-proto/</link>
      <guid>https://blog.dna.moe/2018/09/15/auto-gen-bang-proto/</guid>
      <pubDate>Sat, 15 Sep 2018 12:04:21 GMT</pubDate>
      
      <description>&lt;p&gt;This post is encouraged by &lt;a href=&quot;https://estertion.win/2018/04/bang-dream-proto%E7%9B%B8%E5%85%B3/&quot;&gt;esterTion’s post&lt;/a&gt;. Before I only extract the proto file by hand, but it gives me a easy way to automation. For what is &lt;em&gt;proto file&lt;/em&gt; and &lt;em&gt;protobuf&lt;/em&gt;, please check &lt;a href=&quot;https://developers.google.com/protocol-buffers/&quot;&gt;Google’s documentation&lt;/a&gt;&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<html><head></head><body><p>This post is encouraged by <a href="https://estertion.win/2018/04/bang-dream-proto%E7%9B%B8%E5%85%B3/">esterTion’s post</a>. Before I only extract the proto file by hand, but it gives me a easy way to automation. For what is <em>proto file</em> and <em>protobuf</em>, please check <a href="https://developers.google.com/protocol-buffers/">Google’s documentation</a></p><span id="more"></span><h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>Bangdream (Full name: BanG Dream! Girls Band Party!, Japanese: バンドリ！ ガールズバンドパーティ！) is a rhythm card game released by Bushiroad and developed by Craftegg with Unity. As of today, Unity is becoming more and more popular among game developers. In Unity 4.x.x, there’s nearly no protection to C# source code. With <a href="https://github.com/0xd4d/dnSpy">dnSpy</a> or <a href="https://github.com/icsharpcode/ILSpy">ILSpy</a> it’s very easy to read the code or do some hack.</p><p>From Unity 5, a method called “il2cpp” is applied to convert C# bytecode (IL) to native code. If target is Android, a <code>libil2cpp.so</code> can be found under <code>lib</code> directory. Thanks to Perfare’s amazing tool <a href="https://github.com/Perfare/Il2CppDumper">Il2CppDumper</a>, reading the code is as easy as before.</p><p>Il2CppDumper will generate some files, if you don’t want to read source code with IDA, then just get the <code>dump.cs</code> which includes all classes, methods and variables. For game like Bangdream, you can get rich infomations from this file, like AES key and protobuf definitions. I think Craftegg want to avoid unnecessary files, so they use <em>protobuf-net</em> to write protobuf definitions in C# code.</p><h2 id="Analyse"><a href="#Analyse" class="headerlink" title="Analyse"></a>Analyse</h2><p>The method name in <code>dump.cs</code> are very reasonable. The protobuf definition is always stored in class like “GetResponse” or “PostRequest” prefixed by API path. So “SuiteMasterGetResponse” is the class storing the protobuf definition of game master data (or game database). By reading the <a href="https://estertion.win/2018/04/bang-dream-proto%E7%9B%B8%E5%85%B3/">esterTion’s post</a> and <a href="https://gist.github.com/esterTion/768c646a83a089af9e5fbb83b77a59fc">gist code</a>, it seems not hard to extract proto file from the protobuf definition in il2cpp file. The only problem is how to get the Tag number, which can only be found in binary file.</p><h3 id="Read-and-rewrite-code"><a href="#Read-and-rewrite-code" class="headerlink" title="Read and rewrite code"></a>Read and rewrite code</h3><p>The original code of esterTion is written in PHP. Firstly it read the <code>dump.cs</code> and extract the basic structure of protobuf then generate the valid “proto2” file. The best parts are the regular expressions extracting the class body and ProtoMemberAttribute (=proto message member), but sadly it can only run in PCRE system (like PHP). In Python some grammar is invalid (subroutine and atomic group), it spent me hours to constructure working regex for Python.</p><p>Now I get the proto file but with all Tags as hex address. The original <code>getTag</code> method is not working. Is the original code wrong? Probably not. esterTion seems to use the Mach-O binary, which has the different code from Android library. It needs some adjustments.</p><h3 id="Get-the-right-Tag"><a href="#Get-the-right-Tag" class="headerlink" title="Get the right Tag"></a>Get the right Tag</h3><p>Let’s open the <code>libil2cpp.so</code> with <a href="https://hexed.it/">hex code editor</a> and jump to the address. The hex code for members is like: <code>04 00 90 E5 01 10 A0 E3 ... 04 00 90 E5 02 10 A0 E3 ....</code> One member begins with <code>04 00 90 E5</code>, and the following number keeps changing. Do a verfication and you can find that this is exactly the Tag number you want. Notice that the number is stored in 12 bits, so do not only extract one byte.</p><p>But it’s only one type. Another type begins with <code>10 4C 2D E9</code>, the Tag number is 12 bytes away. So replace the original <code>getTag</code> code with this:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Only for Python 3</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getTag</span>(<span class="params">address</span>):</span><br><span class="line">  offset = address &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line"></span><br><span class="line">  prog.seek(offset)</span><br><span class="line">  inst = prog.read(<span class="number">4</span>)</span><br><span class="line">  inst = <span class="built_in">int</span>.from_bytes(inst, byteorder=<span class="string">'little'</span>, signed=<span class="literal">False</span>)</span><br><span class="line">  <span class="keyword">if</span> inst == <span class="number">0xe5900004</span>: <span class="comment"># caution! little-endian</span></span><br><span class="line">    prog.seek(offset + <span class="number">4</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>.from_bytes(prog.read(<span class="number">2</span>), <span class="string">'little'</span>, signed=<span class="literal">False</span>) &amp; <span class="number">0xfff</span></span><br><span class="line">  <span class="keyword">elif</span> inst == <span class="number">0xe92d4c10</span>: <span class="comment"># caution! little-endian</span></span><br><span class="line">    prog.seek(offset + <span class="number">12</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>.from_bytes(prog.read(<span class="number">2</span>), <span class="string">'little'</span>, signed=<span class="literal">False</span>) &amp; <span class="number">0xfff</span></span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">hex</span>(inst), <span class="built_in">hex</span>(address))</span><br></pre></td></tr></tbody></table></figure><blockquote><p>A small problem: the Tag number 300(0x12c) is stored as 3915(0xf4b). Can’t figure out the reason and made a hardcoding.</p></blockquote><h2 id="Proto-supports-map"><a href="#Proto-supports-map" class="headerlink" title="Proto supports map"></a>Proto supports map</h2><p>Proto files now supports map definition, but it will be compiled to a array structure with objects referring the map key and value. For example, the following protos is equivalent:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">message test {</span><br><span class="line">  map&lt;uint32, string&gt; entries = 1;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">message testEntry {</span><br><span class="line">  required uint32 key = 1;</span><br><span class="line">  required string value = 2;</span><br><span class="line">}</span><br><span class="line">message test {</span><br><span class="line">  repeated testEntry entries = 1;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>The original code only supports the second one. The protobuf for Python supports to generate map structure from the first definition. So the first one is optimal for me. Some changes were made to generate the beautiful map definition.</p><h2 id="Final-words"><a href="#Final-words" class="headerlink" title="Final words"></a>Final words</h2><p>You can find the gist code <a href="https://gist.github.com/dnaroma/1bfc901d95f777a340fcb615d6a96bd3">here</a>. I’ve tested the generated proto file, it fits the game master data. It’s time to say goodbye to manual writting proto file.</p></body></html>]]></content:encoded>
      
      
      <category domain="https://blog.dna.moe/categories/Hack/">Hack</category>
      
      
      <category domain="https://blog.dna.moe/tags/Bandori/">Bandori</category>
      
      <category domain="https://blog.dna.moe/tags/unity/">unity</category>
      
      <category domain="https://blog.dna.moe/tags/il2cpp/">il2cpp</category>
      
      <category domain="https://blog.dna.moe/tags/protobuf/">protobuf</category>
      
      <category domain="https://blog.dna.moe/tags/automation/">automation</category>
      
      
      <comments>https://blog.dna.moe/2018/09/15/auto-gen-bang-proto/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
